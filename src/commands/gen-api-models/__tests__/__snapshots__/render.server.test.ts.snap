// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gen-api-models - server should render a client 1`] = `
"/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import * as express from \\"express\\";

import * as t from \\"io-ts\\";
import { Option } from \\"fp-ts/lib/Option\\";

import { wrapRequestHandler } from \\"@pagopa/ts-commons/lib/request_middleware\\";
import * as r from \\"@pagopa/ts-commons/lib/responses\\";

import {
  AllMiddlewaresFailureResults,
  AllMiddlewaresResults,
  IRequestMiddlewares,
  withRequestMiddlewares
} from \\"./middleware_helpers\\";

import { RequiredQueryParamMiddleware } from \\"@pagopa/io-functions-commons/dist/src/utils/middlewares/required_query_param\\";
import { RequiredBodyPayloadMiddleware } from \\"@pagopa/io-functions-commons/dist/src/utils/middlewares/required_body_payload\\";
import { OptionalParamMiddleware } from \\"@pagopa/io-functions-commons/dist/src/utils/middlewares/optional_param\\";

import { Message } from \\"./Message\\";
import { OneOfTest } from \\"./OneOfTest\\";

// ---------------------------------------------------
// TestAuthBearer
// ---------------------------------------------------

export type ITestAuthBearerPathParams = {};

export type ITestAuthBearerQueryParams = {
  qr: string;

  // TODO optional query params

  // TODO optional query params
};

export type ITestAuthBearerBodyParams = {};

export type ITestAuthBearerRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestAuthBearerPathParams &
  ITestAuthBearerQueryParams &
  ITestAuthBearerBodyParams &
  OtherParams;

type TestAuthBearerSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestAuthBearerFailures =
  /* 403 */
  r.IResponseErrorForbiddenNotAuthorized;

export type ITestAuthBearerRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestAuthBearerRequestHandlerParams<OtherParams>
) => Promise<TestAuthBearerSuccess | TestAuthBearerFailures>;

export const setupTestAuthBearerEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestAuthBearerRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    qr: RequiredQueryParamMiddleware(
      \\"qr\\",

      t.string
    )
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestAuthBearerPathParams &
        ITestAuthBearerQueryParams &
        ITestAuthBearerBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestAuthBearerPathParams &
        ITestAuthBearerQueryParams &
        ITestAuthBearerBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestAuthBearerPathParams &
          ITestAuthBearerQueryParams &
          ITestAuthBearerBodyParams
      ) => Promise<TestAuthBearerSuccess | TestAuthBearerFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(\\"/api/v1/test-auth-bearer\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestSimpleToken
// ---------------------------------------------------

export type ITestSimpleTokenPathParams = {};

export type ITestSimpleTokenQueryParams = {
  qr: string;

  // TODO optional query params

  // TODO optional query params
};

export type ITestSimpleTokenBodyParams = {};

export type ITestSimpleTokenRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestSimpleTokenPathParams &
  ITestSimpleTokenQueryParams &
  ITestSimpleTokenBodyParams &
  OtherParams;

type TestSimpleTokenSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestSimpleTokenFailures =
  /* 403 */
  r.IResponseErrorForbiddenNotAuthorized;

export type ITestSimpleTokenRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestSimpleTokenRequestHandlerParams<OtherParams>
) => Promise<TestSimpleTokenSuccess | TestSimpleTokenFailures>;

export const setupTestSimpleTokenEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestSimpleTokenRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    qr: RequiredQueryParamMiddleware(
      \\"qr\\",

      t.string
    )
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestSimpleTokenPathParams &
        ITestSimpleTokenQueryParams &
        ITestSimpleTokenBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestSimpleTokenPathParams &
        ITestSimpleTokenQueryParams &
        ITestSimpleTokenBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestSimpleTokenPathParams &
          ITestSimpleTokenQueryParams &
          ITestSimpleTokenBodyParams
      ) => Promise<TestSimpleTokenSuccess | TestSimpleTokenFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(\\"/api/v1/test-simple-token\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestMultipleSuccess
// ---------------------------------------------------

export type ITestMultipleSuccessPathParams = {};

export type ITestMultipleSuccessQueryParams = {};

export type ITestMultipleSuccessBodyParams = {};

export type ITestMultipleSuccessRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestMultipleSuccessPathParams &
  ITestMultipleSuccessQueryParams &
  ITestMultipleSuccessBodyParams &
  OtherParams;

type TestMultipleSuccessSuccess =
  /* 200 */
  | r.IResponseSuccessJson<Message>
  /* 202 */
  | r.IResponseSuccessAccepted<undefined>;

type TestMultipleSuccessFailures =
  /* 403 */
  | r.IResponseErrorForbiddenNotAuthorized

  /* 404 */
  | r.IResponseErrorNotFound;

export type ITestMultipleSuccessRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestMultipleSuccessRequestHandlerParams<OtherParams>
) => Promise<TestMultipleSuccessSuccess | TestMultipleSuccessFailures>;

export const setupTestMultipleSuccessEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestMultipleSuccessRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {};

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestMultipleSuccessPathParams &
        ITestMultipleSuccessQueryParams &
        ITestMultipleSuccessBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestMultipleSuccessPathParams &
        ITestMultipleSuccessQueryParams &
        ITestMultipleSuccessBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestMultipleSuccessPathParams &
          ITestMultipleSuccessQueryParams &
          ITestMultipleSuccessBodyParams
      ) => Promise<TestMultipleSuccessSuccess | TestMultipleSuccessFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(\\"/api/v1/test-multiple-success\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestFileUpload
// ---------------------------------------------------

export type ITestFileUploadPathParams = {};

export type ITestFileUploadQueryParams = {};

export type ITestFileUploadBodyParams = {};

export type ITestFileUploadRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestFileUploadPathParams &
  ITestFileUploadQueryParams &
  ITestFileUploadBodyParams &
  OtherParams;

type TestFileUploadSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestFileUploadFailures = never;

export type ITestFileUploadRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestFileUploadRequestHandlerParams<OtherParams>
) => Promise<TestFileUploadSuccess | TestFileUploadFailures>;

export const setupTestFileUploadEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestFileUploadRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {};

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestFileUploadPathParams &
        ITestFileUploadQueryParams &
        ITestFileUploadBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestFileUploadPathParams &
        ITestFileUploadQueryParams &
        ITestFileUploadBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestFileUploadPathParams &
          ITestFileUploadQueryParams &
          ITestFileUploadBodyParams
      ) => Promise<TestFileUploadSuccess | TestFileUploadFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.post(\\"/api/v1/test-file-upload\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestResponseHeader
// ---------------------------------------------------

export type ITestResponseHeaderPathParams = {};

export type ITestResponseHeaderQueryParams = {};

export type ITestResponseHeaderBodyParams = {};

export type ITestResponseHeaderRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestResponseHeaderPathParams &
  ITestResponseHeaderQueryParams &
  ITestResponseHeaderBodyParams &
  OtherParams;

type TestResponseHeaderSuccess =
  /* 201 */
  r.IResponseSuccessRedirectToResource<Message, Message>;

type TestResponseHeaderFailures =
  /* 500 */
  r.IResponseErrorInternal;

export type ITestResponseHeaderRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestResponseHeaderRequestHandlerParams<OtherParams>
) => Promise<TestResponseHeaderSuccess | TestResponseHeaderFailures>;

export const setupTestResponseHeaderEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestResponseHeaderRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {};

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestResponseHeaderPathParams &
        ITestResponseHeaderQueryParams &
        ITestResponseHeaderBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestResponseHeaderPathParams &
        ITestResponseHeaderQueryParams &
        ITestResponseHeaderBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestResponseHeaderPathParams &
          ITestResponseHeaderQueryParams &
          ITestResponseHeaderBodyParams
      ) => Promise<TestResponseHeaderSuccess | TestResponseHeaderFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(\\"/api/v1/test-response-header\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestParameterWithReference
// ---------------------------------------------------

export type ITestParameterWithReferencePathParams = {};

export type ITestParameterWithReferenceQueryParams = {};

export type ITestParameterWithReferenceBodyParams = {
  createdMessage: Message;
};

export type ITestParameterWithReferenceRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestParameterWithReferencePathParams &
  ITestParameterWithReferenceQueryParams &
  ITestParameterWithReferenceBodyParams &
  OtherParams;

type TestParameterWithReferenceSuccess =
  /* 201 */
  r.IResponseSuccessRedirectToResource<undefined, undefined>;

type TestParameterWithReferenceFailures =
  /* 500 */
  r.IResponseErrorInternal;

export type ITestParameterWithReferenceRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestParameterWithReferenceRequestHandlerParams<OtherParams>
) => Promise<
  TestParameterWithReferenceSuccess | TestParameterWithReferenceFailures
>;

export const setupTestParameterWithReferenceEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestParameterWithReferenceRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    createdMessage: RequiredBodyPayloadMiddleware(Message)
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestParameterWithReferencePathParams &
        ITestParameterWithReferenceQueryParams &
        ITestParameterWithReferenceBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestParameterWithReferencePathParams &
        ITestParameterWithReferenceQueryParams &
        ITestParameterWithReferenceBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestParameterWithReferencePathParams &
          ITestParameterWithReferenceQueryParams &
          ITestParameterWithReferenceBodyParams
      ) => Promise<
        TestParameterWithReferenceSuccess | TestParameterWithReferenceFailures
      >
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.post(\\"/api/v1/test-parameter-with-reference\\", handlerWithMiddlewares);
};

// ---------------------------------------------------
// TestParameterWithDash
// ---------------------------------------------------

export type ITestParameterWithDashPathParams = {
  pathParam: Option<string>;
};

export type ITestParameterWithDashQueryParams = {
  // TODO optional query params
  // TODO optional query params
};

export type ITestParameterWithDashBodyParams = {};

export type ITestParameterWithDashRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestParameterWithDashPathParams &
  ITestParameterWithDashQueryParams &
  ITestParameterWithDashBodyParams &
  OtherParams;

type TestParameterWithDashSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestParameterWithDashFailures =
  /* 500 */
  r.IResponseErrorInternal;

export type ITestParameterWithDashRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestParameterWithDashRequestHandlerParams<OtherParams>
) => Promise<TestParameterWithDashSuccess | TestParameterWithDashFailures>;

export const setupTestParameterWithDashEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestParameterWithDashRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    pathParam: OptionalParamMiddleware(
      \\"pathParam\\",

      t.string
    )
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestParameterWithDashPathParams &
        ITestParameterWithDashQueryParams &
        ITestParameterWithDashBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestParameterWithDashPathParams &
        ITestParameterWithDashQueryParams &
        ITestParameterWithDashBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestParameterWithDashPathParams &
          ITestParameterWithDashQueryParams &
          ITestParameterWithDashBodyParams
      ) => Promise<TestParameterWithDashSuccess | TestParameterWithDashFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(
    \\"/api/v1/test-parameter-with-dash/:pathParam\\",
    handlerWithMiddlewares
  );
};

// ---------------------------------------------------
// TestParameterWithDashAnUnderscore
// ---------------------------------------------------

export type ITestParameterWithDashAnUnderscorePathParams = {
  pathParam: Option<string>;
};

export type ITestParameterWithDashAnUnderscoreQueryParams = {
  // TODO optional query params
  // TODO optional query params
};

export type ITestParameterWithDashAnUnderscoreBodyParams = {};

export type ITestParameterWithDashAnUnderscoreRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestParameterWithDashAnUnderscorePathParams &
  ITestParameterWithDashAnUnderscoreQueryParams &
  ITestParameterWithDashAnUnderscoreBodyParams &
  OtherParams;

type TestParameterWithDashAnUnderscoreSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestParameterWithDashAnUnderscoreFailures =
  /* 500 */
  r.IResponseErrorInternal;

export type ITestParameterWithDashAnUnderscoreRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestParameterWithDashAnUnderscoreRequestHandlerParams<OtherParams>
) => Promise<
  | TestParameterWithDashAnUnderscoreSuccess
  | TestParameterWithDashAnUnderscoreFailures
>;

export const setupTestParameterWithDashAnUnderscoreEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestParameterWithDashAnUnderscoreRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    pathParam: OptionalParamMiddleware(
      \\"pathParam\\",

      t.string
    )
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestParameterWithDashAnUnderscorePathParams &
        ITestParameterWithDashAnUnderscoreQueryParams &
        ITestParameterWithDashAnUnderscoreBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestParameterWithDashAnUnderscorePathParams &
        ITestParameterWithDashAnUnderscoreQueryParams &
        ITestParameterWithDashAnUnderscoreBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestParameterWithDashAnUnderscorePathParams &
          ITestParameterWithDashAnUnderscoreQueryParams &
          ITestParameterWithDashAnUnderscoreBodyParams
      ) => Promise<
        | TestParameterWithDashAnUnderscoreSuccess
        | TestParameterWithDashAnUnderscoreFailures
      >
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(
    \\"/api/v1/test-parameter-with-dash-and_underscore/:pathParam\\",
    handlerWithMiddlewares
  );
};

// ---------------------------------------------------
// TestWithTwoParams
// ---------------------------------------------------

export type ITestWithTwoParamsPathParams = {
  firstParam: Option<string>;
  secondParam: Option<string>;
};

export type ITestWithTwoParamsQueryParams = {};

export type ITestWithTwoParamsBodyParams = {};

export type ITestWithTwoParamsRequestHandlerParams<
  OtherParams extends Record<string, any>
> = ITestWithTwoParamsPathParams &
  ITestWithTwoParamsQueryParams &
  ITestWithTwoParamsBodyParams &
  OtherParams;

type TestWithTwoParamsSuccess =
  /* 200 */
  r.IResponseSuccessJson<undefined>;

type TestWithTwoParamsFailures =
  /* 500 */
  r.IResponseErrorInternal;

export type ITestWithTwoParamsRequestHandler<
  OtherParams extends Record<string, any>
> = (
  args: ITestWithTwoParamsRequestHandlerParams<OtherParams>
) => Promise<TestWithTwoParamsSuccess | TestWithTwoParamsFailures>;

export const setupTestWithTwoParamsEndpoint = <
  OtherParams extends Record<string, any> | never,
  MiddlewareFailureKind extends string = string
>(
  app: express.Express,
  handler: ITestWithTwoParamsRequestHandler<OtherParams>,
  middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, any>
): void => {
  // Generated Middleware
  const generatedMiddlewares = {
    firstParam: OptionalParamMiddleware(
      \\"firstParam\\",

      t.string
    ),

    secondParam: OptionalParamMiddleware(
      \\"secondParam\\",

      t.string
    )
  };

  let wrappedWithMiddlewares;
  if (middlewares) {
    const allMiddlewares = {
      ...middlewares,
      ...generatedMiddlewares
    };

    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | MiddlewareFailureKind
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      | AllMiddlewaresResults<typeof generatedMiddlewares>
      | AllMiddlewaresResults<typeof middlewares>,
      string,
      ITestWithTwoParamsPathParams &
        ITestWithTwoParamsQueryParams &
        ITestWithTwoParamsBodyParams &
        OtherParams
    >(allMiddlewares)(handler);
  } else {
    wrappedWithMiddlewares = withRequestMiddlewares<
      | \\"IResponseErrorValidation\\"
      | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
      AllMiddlewaresResults<typeof generatedMiddlewares>,
      string,
      ITestWithTwoParamsPathParams &
        ITestWithTwoParamsQueryParams &
        ITestWithTwoParamsBodyParams
    >(generatedMiddlewares)(
      handler as (
        args: ITestWithTwoParamsPathParams &
          ITestWithTwoParamsQueryParams &
          ITestWithTwoParamsBodyParams
      ) => Promise<TestWithTwoParamsSuccess | TestWithTwoParamsFailures>
    );
  }

  const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

  app.get(
    \\"/api/v1/test-two-path-params/:firstParam/:secondParam\\",
    handlerWithMiddlewares
  );
};
"
`;
