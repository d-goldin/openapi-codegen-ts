{%- import "macros.njk" as macro -%}


{# ---------- #}
{# Macros #}
{# ---------- #}

{% macro getParameterDecoderType(parameter, openApiParameters) -%}
  {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
  {% set parameterDefinition = openApiParameters | filterByParameterIn("name", parameterName) | first %}
  {% set parameterType = parameterName+"Decoder" if parameterDefinition else parameter.type | safe %}
  {{ parameterType }}
{% endmacro %}

{% macro getParameterDecoder(parameter, openApiParameters) -%}
  {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
  {% set parameterDefinition = openApiParameters | filterByParameterIn("name", parameterName) | first %}
  {% set parameterType = parameterName+"Decoder" if parameterDefinition else macro.defineObjectPropertyDecoderType(parameterName, parameter, "") | trim  |  replace(",", "") %}
  {{ parameterType }}
{% endmacro %}

{# ---------- #}
{# End Macros #}
{# ---------- #}


/** 
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import * as express from "express";

import * as t from "io-ts";
import { Option } from "fp-ts/lib/Option";

import { wrapRequestHandler } from "@pagopa/ts-commons/lib/request_middleware";
import * as r from "@pagopa/ts-commons/lib/responses";

import { AllMiddlewaresFailureResults, AllMiddlewaresResults, IRequestMiddlewares, withRequestMiddlewares } from "./middleware_helpers";

{{- null | resetImports -}}


{# Set block to be written after imports #}
{% set codeBlock %}

  // ---------------------------------------------------
  // Inline parameters decoders and types
  // ---------------------------------------------------

  {% for parameter in parameters | filterByParameterIn("in", ["body", "path", "query"]) %}
    {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
    {% set paramDecoderType =  macro.defineObjectPropertyDecoderType(parameterName, parameter, "")  %}
    
    const {{ parameterName }}Decoder = {{ paramDecoderType | replace('),', ')') }}; 
    type {{ parameterName }}Decoder =  t.TypeOf<typeof {{ parameterName }}Decoder>; 
  {% endfor %}


  {% for operation in operations %}
  {# {% set operation = operations[6] %} #}
  {% set operationName = operation.operationId | capitalizeFirst %}

  {% set bodyParams = operation.parameters | paramIn("body") %}
  {% set pathParams = operation.parameters | paramIn("path") %}
  {% set queryParams = operation.parameters | paramIn("query") %}

  {# TODO: Handle ---- #}
  {% set headerParams = operation.parameters | paramIn("header") %}
  {% set formParams = operation.parameters | paramIn("formData") %}
  {# TODO: Handle ---- #}

  {% set requestPathParamsType = "I"+( operationName )+"PathParams" %}
  {% set requestQueryParamsType = "I"+( operationName )+"QueryParams" %}
  {% set requestBodyParamsType = "I"+( operationName )+"BodyParams" %}
  {% set allGeneratedParamsType = "I"+( operationName )+"AllGeneratedParams" %}


  // ---------------------------------------------------
  // {{ operationName }}
  // ---------------------------------------------------

  type {{ requestPathParamsType }} = {
    {% for parameter in pathParams %}
        {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
        {% set parameterType = getParameterDecoderType(parameter, parameters) %}
      {% if [parameter] | required | length %}
        {{ parameterName }}: {{ parameterType }};
      {% else %}
        {{ parameterName }}: Option<{{ parameterType }}>;
      {% endif %}    
    {% endfor %}
  }

  type {{ requestQueryParamsType }} = {
    {% for parameter in queryParams | required %}
        {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
        {% set parameterType = getParameterDecoderType(parameter, parameters) %}
      {{ parameterName }}: {{ parameterType }};
    {% endfor %}

    {% for parameter in queryParams | optional %}
      // TODO optional query params{% endfor %}
  }

  type {{ requestBodyParamsType }} = {
      {% for parameter in bodyParams %}
        {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
        {{ parameterName }}: {{ parameter.type | safe }};{% endfor %}
  }

  export type {{ allGeneratedParamsType }} = {{ requestPathParamsType }} & {{ requestQueryParamsType }}  & {{ requestBodyParamsType }};

  export type {{ operationName }}Success = {{ macro.resultSuccessTypes(operation) }};

  export type {{ operationName }}Failures = {{ macro.resultFailureTypes(operation) }};


  export type I{{operationName}}RequestHandler<  OtherParams extends Record<string, any> | Record<string, never>> = (
    args: {{ allGeneratedParamsType }} & OtherParams
  ) => Promise<{{ operationName }}Success | {{ operationName }}Failures>;


  export const setup{{ operationName }}Endpoint = <
    OtherParams extends Record<string, any> | Record<string, never>,
    MiddlewareFailureKind extends string = string
  >(
    app: express.Express,
    handler: I{{operationName}}RequestHandler<OtherParams>,
    middlewares?: IRequestMiddlewares<OtherParams, MiddlewareFailureKind, OtherParams[keyof OtherParams]>
  ): void => {

    // Generated Middleware
    const generatedMiddlewares = {
      {% for parameter in pathParams | required %}
          {{- 'import { RequiredParamMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/required_param";' | addImport -}}
          {% set parameterName = parameter| pick("name") | safeIdentifier | safe %}
          {% set parameterType = getParameterDecoder(parameter, parameters) %}
        {{ parameterName }}: RequiredParamMiddleware("{{  parameterName }}",  {{ parameterType }}),
      {% endfor %}
      {% for parameter in pathParams | optional %}
          {{- 'import { OptionalParamMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/optional_param";' | addImport -}}
          {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
          {% set parameterType = getParameterDecoder(parameter, parameters) %}
        {{ parameterName }}: OptionalParamMiddleware("{{  parameterName }}",  {{ parameterType }}),
      {% endfor %}
      {% for parameter in queryParams | required %}
          {{- 'import { RequiredQueryParamMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/required_query_param";' | addImport -}}
          {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
          {% set parameterType = getParameterDecoder(parameter, parameters) %}
        {{ parameterName }}: RequiredQueryParamMiddleware("{{  parameterName }}", {{ parameterType }}),
      {% endfor %}
      {% for parameter in bodyParams %}
          {{- 'import { RequiredBodyPayloadMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/required_body_payload";' | addImport -}}
          {% set parameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
          {% set parameterType = getParameterDecoder(parameter, parameters) %}
        {{ parameterName }}: RequiredBodyPayloadMiddleware( {{ parameterType }}),
      {% endfor %}
    };

    let wrappedWithMiddlewares;
    if (middlewares) {
      const allMiddlewares = {
        ...middlewares,
        ...generatedMiddlewares
      };

      wrappedWithMiddlewares = withRequestMiddlewares<
        "IResponseErrorValidation" 
        | MiddlewareFailureKind
        | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
        | AllMiddlewaresResults<typeof generatedMiddlewares>
        | AllMiddlewaresResults<typeof middlewares>,
        string,
        {{ allGeneratedParamsType }} & OtherParams
      >(allMiddlewares)(handler);
    } else {
      wrappedWithMiddlewares = withRequestMiddlewares<
        "IResponseErrorValidation"
        | AllMiddlewaresFailureResults<typeof generatedMiddlewares>,
        AllMiddlewaresResults<typeof generatedMiddlewares>,
        string,
        {{ allGeneratedParamsType }}
      >(generatedMiddlewares)(
        handler as (
          args: {{ allGeneratedParamsType }} 
        ) => Promise<{{ operationName }}Success | {{ operationName }}Failures>
      );
    }

    const handlerWithMiddlewares = wrapRequestHandler(wrappedWithMiddlewares);

    {% set operationPath = operation.path | replace('{', '') | replace('}', '') %}
    {% for parameter in pathParams %}
      {% set parameterName = parameter| pick("name") | stripQuestionMark | safe %}
      {% set sanitizedParameterName = parameter| pick("name") | stripQuestionMark | safeIdentifier | safe %}
      {% set operationPath = operationPath | replace("/"+parameterName, "/:"+sanitizedParameterName ) %}
    {% endfor %}

    app.{{operation.method}}("{{spec.basePath}}{{operationPath}}", handlerWithMiddlewares);
  };

  {# End for operation #}
  {% endfor %}

{% endset %}



{{ null | getImports | safe }}
{{ null | getTypeAliases | safe }}

{% if operations | length %}
{% for type in operations | toUniqueImports %}
    import {
        {{ type }},
    } from "./{{type}}";{% endfor %}
{% endif%}

{# finally write codeBlock #}
{{ codeBlock | safe }}



